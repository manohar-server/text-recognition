{"ast":null,"code":"import _defineProperty from \"/opt/text-recognition/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/opt/text-recognition/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/text-recognition/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/opt/text-recognition/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/text-recognition/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/text-recognition/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/text-recognition/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/text-recognition/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/text-recognition/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport \"react-progress-2/main.css\";\nimport Progress from \"react-progress-2\";\nimport { ButtonGroup, Button, Col, Container, FormGroup, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader, Row } from 'reactstrap';\nimport restClient from \"./restClient\";\nimport MetadataListView from \"./MetadataListView\";\nvar pageSize = 10;\nvar initMetaDataPaged = {\n  content: [],\n  totalSize: 0,\n  page: 0\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.setStateAsync = function (state) {\n      return new Promise(function (resolve) {\n        _this.setState(state, resolve);\n      });\n    };\n\n    _this.toggleErrorAsync =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(error) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.toggleModalAsync(error);\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.toggleModalAsync =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(message) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.setStateAsync(function (state) {\n                  return {\n                    blocking: !state.blocking,\n                    modal: !state.modal,\n                    modalMessage: state.modal ? \"\" : message\n                  };\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.fetchMetadata =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(page, sizePerPage, sortOrder) {\n        var sort, response, metaDataPaged;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                sort = sortOrder || \"asc\";\n                _context3.next = 4;\n                return restClient.fetchAll(page, pageSize, sort);\n\n              case 4:\n                response = _context3.sent;\n                metaDataPaged = {};\n                metaDataPaged.content = response.content;\n                metaDataPaged.totalSize = response.totalElements;\n                metaDataPaged.page = page + 1; // rest api pages are 0-indexed while this component is 1-based indexed\n\n                metaDataPaged.sizePerPage = sizePerPage;\n                metaDataPaged.sortOrder = sort;\n                _context3.next = 13;\n                return _this.setStateAsync({\n                  metaDataPaged: metaDataPaged\n                });\n\n              case 13:\n                return _context3.abrupt(\"return\", metaDataPaged);\n\n              case 16:\n                _context3.prev = 16;\n                _context3.t0 = _context3[\"catch\"](0);\n                _context3.next = 20;\n                return _this.toggleErrorAsync(\"Cannot fetch tests\");\n\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 16]]);\n      }));\n\n      return function (_x3, _x4, _x5) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.handleInputChange = function (event) {\n      var _this$setState;\n\n      var target = event.target;\n      var value = target.type === 'file' ? event.target.files[0] : target.value;\n      var name = target.name;\n\n      if (target.type === 'file') {\n        _this.setState({\n          model: '',\n          year: '',\n          raw: '',\n          modelYear: ''\n        });\n      }\n\n      _this.setState((_this$setState = {}, _defineProperty(_this$setState, name, value), _defineProperty(_this$setState, \"error\", \"\"), _this$setState));\n    };\n\n    _this.onUpload =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              Progress.show();\n              _context4.prev = 1;\n              _context4.next = 4;\n              return restClient.uploadFile(_this.state.file, _this.state.title, _this.state.details);\n\n            case 4:\n              result = _context4.sent;\n              console.log(result);\n\n              _this.setState({\n                model: result.model,\n                year: result.year,\n                raw: result.raw,\n                modelYear: result.size\n              });\n\n              Progress.hide();\n              _context4.next = 16;\n              break;\n\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](1);\n              Progress.hide();\n              _context4.next = 15;\n              return _this.toggleErrorAsync(_context4.t0.message);\n\n            case 15:\n              return _context4.abrupt(\"return\");\n\n            case 16:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this, [[1, 10]]);\n    }));\n\n    _this.getMetadataColumns = function () {\n      var keysArr = _this.state.metaDataPaged.content.map(function (e) {\n        return Object.keys(e);\n      });\n\n      var keys = keysArr.length > 0 ? keysArr[0] : [];\n      var headerParams = keys.map(function (k) {\n        return {\n          fieldName: k,\n          columnName: k\n        };\n      });\n\n      if (headerParams.length > 0) {\n        // key attribute is required on one column\n        headerParams[0].isKey = true;\n      }\n\n      return headerParams;\n    };\n\n    _this.state = {\n      file: \"\",\n      title: \"\",\n      details: \"\",\n      error: \"\",\n      metaDataPaged: initMetaDataPaged,\n      modalMessage: \"\",\n      modal: false,\n      blocking: false,\n      model: '',\n      year: '',\n      raw: '',\n      modelYear: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {//this.fetchMetadata(0, pageSize);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Progress.Component, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Browse and Upload File to Extract Text\"))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"file\",\n        sm: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), React.createElement(Col, {\n        sm: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"file\",\n        name: \"file\",\n        id: \"file\",\n        Input: true,\n        placeholder: \"Select a file for upload\",\n        onChange: this.handleInputChange,\n        valid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }))))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(ButtonGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Button, {\n        disabled: this.state.file === \"\",\n        color: \"primary\",\n        size: \"md\",\n        onClick: this.onUpload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Upload\")))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"hr\", {\n        className: \"divider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(Label, {\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"ModelYear\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, this.state.modelYear))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Label, {\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"Model\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, this.state.model))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Label, {\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"Year\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, this.state.year))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(Label, {\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Raw Text\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, this.state.raw)))))), React.createElement(Modal, {\n        isOpen: this.state.blocking,\n        toggle: function toggle() {\n          return false;\n        },\n        className: this.props.className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"Loading...\")), React.createElement(Modal, {\n        isOpen: this.state.modal,\n        className: this.props.className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, this.state.modalMessage), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"secondary\",\n        onClick: this.toggleErrorAsync,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"OK\"))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/opt/text-recognition/client/src/App.js"],"names":["React","Component","Progress","ButtonGroup","Button","Col","Container","FormGroup","Input","Label","Modal","ModalBody","ModalFooter","ModalHeader","Row","restClient","MetadataListView","pageSize","initMetaDataPaged","content","totalSize","page","App","props","setStateAsync","state","Promise","resolve","setState","toggleErrorAsync","error","toggleModalAsync","message","blocking","modal","modalMessage","fetchMetadata","sizePerPage","sortOrder","sort","fetchAll","response","metaDataPaged","totalElements","handleInputChange","event","target","value","type","files","name","model","year","raw","modelYear","onUpload","show","uploadFile","file","title","details","result","console","log","size","hide","getMetadataColumns","keysArr","map","e","Object","keys","length","headerParams","k","fieldName","columnName","isKey","className"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport \"react-progress-2/main.css\";\nimport Progress from \"react-progress-2\";\nimport {\n    ButtonGroup,\n    Button,\n    Col,\n    Container,\n    FormGroup,\n    Input,\n    Label,\n    Modal,\n    ModalBody,\n    ModalFooter,\n    ModalHeader,\n    Row\n} from 'reactstrap';\nimport restClient from \"./restClient\";\nimport MetadataListView from \"./MetadataListView\";\n\nconst pageSize = 10;\nconst initMetaDataPaged = {\n    content: [],\n    totalSize: 0,\n    page: 0\n};\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            file: \"\",\n            title: \"\",\n            details: \"\",\n            error: \"\",\n            metaDataPaged: initMetaDataPaged,\n            modalMessage: \"\",\n            modal: false,\n            blocking: false,\n\t    model : '',\n\t    year: '',\n\t    raw : '',\n\t    modelYear: '',\n        }\n    }\n\n    componentDidMount() {\n        //this.fetchMetadata(0, pageSize);\n    }\n\n    setStateAsync = (state) => {\n        return new Promise((resolve) => {\n            this.setState(state, resolve)\n        });\n    };\n\n    toggleErrorAsync = async (error) => await this.toggleModalAsync(error);\n\n    toggleModalAsync = async (message) => {\n        await this.setStateAsync((state) => ({\n            blocking: !state.blocking,\n            modal: !state.modal,\n            modalMessage: state.modal ? \"\" : message\n        }));\n    };\n\n    //////////////////////// operations on test data with rest client //////////////////////////////\n    fetchMetadata = async (page, sizePerPage, sortOrder) => {\n        try {\n            const sort = sortOrder || \"asc\";\n            const response = await restClient.fetchAll(page, pageSize, sort);\n            const metaDataPaged = {};\n            metaDataPaged.content = response.content;\n            metaDataPaged.totalSize = response.totalElements;\n            metaDataPaged.page = page + 1;// rest api pages are 0-indexed while this component is 1-based indexed\n            metaDataPaged.sizePerPage = sizePerPage;\n            metaDataPaged.sortOrder = sort;\n            await this.setStateAsync({metaDataPaged: metaDataPaged});\n            return metaDataPaged;\n        } catch (error) {\n            await this.toggleErrorAsync(\"Cannot fetch tests\");\n        }\n    };\n\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'file' ? event.target.files[0] : target.value;\n        const name = target.name;\n\tif(target.type === 'file'){\n\t\tthis.setState({model : '',\n            year: '',\n            raw : '',\n            modelYear: ''});\n\t}\n        this.setState({\n            [name]: value, error: \"\"\n        });\n    };\n\n    onUpload = async () => {\n\tProgress.show();\n        try {\n            const result = await restClient.uploadFile(this.state.file, this.state.title, this.state.details);\n\t    console.log(result);\n\t    this.setState({model: result.model, year: result.year, raw: result.raw, modelYear: result.size});\n\t    Progress.hide();\n        } catch (e) {\n\t    Progress.hide();\n            await this.toggleErrorAsync(e.message);\n            return;\n        }\n        //await this.fetchMetadata(0, pageSize);\n    }\n    getMetadataColumns = () => {\n        const keysArr = this.state.metaDataPaged.content.map(e => Object.keys(e));\n        const keys = keysArr.length > 0 ? keysArr[0] : [];\n        const headerParams = keys.map(k => {\n            return {fieldName: k, columnName: k};\n        });\n        if (headerParams.length > 0) {\n            // key attribute is required on one column\n            headerParams[0].isKey = true;\n        }\n        return headerParams;\n    };\n\n\n    render() {\n        return (\n            <div className=\"App\">\n\t\t<Progress.Component/>\n                <Container>\n                    <Row>\n                        <Col>\n                            <h6>Browse and Upload File to Extract Text</h6>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <FormGroup row>\n                                <Label for=\"file\" sm={4}></Label>\n                                <Col sm={8}>\n                                    <Input type=\"file\" name=\"file\" id=\"file\"\n                               Input       placeholder=\"Select a file for upload\"\n                                           onChange={this.handleInputChange}\n                                           valid={true}/>\n                                </Col>\n                            </FormGroup>                           \n                        </Col>\n\n                    </Row>\n                    <Row>\n                        <Col>\n                            <ButtonGroup>\n                                <Button\n                                    disabled={this.state.file === \"\"}\n                                    color=\"primary\" size=\"md\"\n                                    onClick={this.onUpload}>Upload</Button>\n                            </ButtonGroup>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <hr className={\"divider\"}/>\n                    </Row>\n\t\t\t<Row>\n<Col>\n\t<FormGroup row>\n                                <Label sm={2}>ModelYear</Label>\n                                <Col sm={10}>\n                                   <label>{this.state.modelYear}</label>\n                                </Col>\n                            </FormGroup>\n\n                        <FormGroup row>\n                                <Label sm={2}>Model</Label>\n                                <Col sm={10}>\n                                   <label>{this.state.model}</label>\n                                </Col>\n                            </FormGroup>\n<FormGroup row>\n                                <Label sm={2}>Year</Label>\n                                <Col sm={10}>\n                                    <label>{this.state.year}</label>\n                                </Col>\n                            </FormGroup>\n<FormGroup row>\n                                <Label sm={2}>Raw Text</Label>\n                                <Col sm={10}>\n                                    <label>{this.state.raw}</label>\n                                </Col>\n                            </FormGroup>\n</Col>\n                    </Row>\n                    \n                </Container>\n\n\n                {/*Waiting modal*/}\n                <Modal isOpen={this.state.blocking} toggle={() => false}\n                       className={this.props.className}>\n                    <ModalBody>\n                        Loading...\n                    </ModalBody>\n                </Modal>\n\n\n                {/*Error modal*/}\n                <Modal isOpen={this.state.modal} className={this.props.className}>\n                    <ModalHeader>{/*Error*/}</ModalHeader>\n                    <ModalBody>\n                        {this.state.modalMessage}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"secondary\" onClick={this.toggleErrorAsync}>OK</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}