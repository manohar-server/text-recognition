{"ast":null,"code":"import _classCallCheck from \"/opt/text-recognition/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/text-recognition/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/text-recognition/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/text-recognition/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/text-recognition/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/opt/text-recognition/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/opt/text-recognition/client/src/MetadataListView.js\";\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\nvar MetadataListView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MetadataListView, _React$Component);\n\n  function MetadataListView(props) {\n    var _this;\n\n    _classCallCheck(this, MetadataListView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MetadataListView).call(this, props));\n    _this.handlePageChange = _this.handlePageChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSizePerPageChange = _this.handleSizePerPageChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MetadataListView, [{\n    key: \"handlePageChange\",\n    value: function handlePageChange(page, sizePerPage) {\n      this.props.fetchData(page - 1, sizePerPage); // rest api pages are 0-indexed while this component is 1-based indexed\n    }\n  }, {\n    key: \"handleSizePerPageChange\",\n    value: function handleSizePerPageChange(sizePerPage) {\n      // When changing the size per page always navigating to the first page\n      this.props.fetchData(this.props.testId, 0, sizePerPage);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var options = {\n        onSortChange: this.handleSort,\n        onPageChange: this.handlePageChange,\n        onSizePerPageList: this.handleSizePerPageChange,\n        page: this.props.page,\n        hideSizePerPage: true\n      };\n      return React.createElement(BootstrapTable, {\n        data: this.props.data,\n        remote: true,\n        fetchInfo: {\n          dataTotalSize: this.props.totalSize\n        },\n        pagination: true,\n        options: options,\n        hover: true,\n        bodyStyle: {\n          overflow: 'overlay'\n        },\n        scrollTop: 'Bottom',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, this.props.columns.length === 0 ? React.createElement(TableHeaderColumn, {\n        key: \"1\",\n        dataField: \"empty\",\n        isKey: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }) : this.props.columns.map(function (c) {\n        return React.createElement(TableHeaderColumn, {\n          key: c.columnName,\n          dataField: c.fieldName,\n          width: \"150px\",\n          isKey: c.isKey,\n          dataSort: c.dataSort,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, c.columnName);\n      }));\n    }\n  }]);\n\n  return MetadataListView;\n}(React.Component);\n\nexport { MetadataListView as default };","map":{"version":3,"sources":["/opt/text-recognition/client/src/MetadataListView.js"],"names":["React","BootstrapTable","TableHeaderColumn","MetadataListView","props","handlePageChange","bind","handleSizePerPageChange","page","sizePerPage","fetchData","testId","options","onSortChange","handleSort","onPageChange","onSizePerPageList","hideSizePerPage","data","dataTotalSize","totalSize","overflow","columns","length","map","c","columnName","fieldName","isKey","dataSort","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,cADJ,EAEIC,iBAFJ,QAGO,uBAHP;;IAKqBC,gB;;;;;AACjB,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,0FAAMA,KAAN;AACA,UAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBC,IAAtB,uDAAxB;AACA,UAAKC,uBAAL,GAA+B,MAAKA,uBAAL,CAA6BD,IAA7B,uDAA/B;AAHe;AAIlB;;;;qCAEgBE,I,EAAMC,W,EAAa;AAChC,WAAKL,KAAL,CAAWM,SAAX,CAAqBF,IAAI,GAAC,CAA1B,EAA6BC,WAA7B,EADgC,CACW;AAC9C;;;4CAEuBA,W,EAAa;AACjC;AACA,WAAKL,KAAL,CAAWM,SAAX,CAAqB,KAAKN,KAAL,CAAWO,MAAhC,EAAuC,CAAvC,EAA0CF,WAA1C;AACH;;;6BAEQ;AAEL,UAAMG,OAAO,GAAG;AACZC,QAAAA,YAAY,EAAE,KAAKC,UADP;AAEZC,QAAAA,YAAY,EAAE,KAAKV,gBAFP;AAGZW,QAAAA,iBAAiB,EAAE,KAAKT,uBAHZ;AAIZC,QAAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWI,IAJL;AAKZS,QAAAA,eAAe,EAAE;AALL,OAAhB;AAQA,aACI,oBAAC,cAAD;AAAgB,QAAA,IAAI,EAAE,KAAKb,KAAL,CAAWc,IAAjC;AACgB,QAAA,MAAM,EAAE,IADxB;AAEgB,QAAA,SAAS,EAAE;AAACC,UAAAA,aAAa,EAAE,KAAKf,KAAL,CAAWgB;AAA3B,SAF3B;AAGgB,QAAA,UAAU,EAAE,IAH5B;AAIgB,QAAA,OAAO,EAAER,OAJzB;AAKgB,QAAA,KAAK,EAAE,IALvB;AAMgB,QAAA,SAAS,EAAE;AAACS,UAAAA,QAAQ,EAAE;AAAX,SAN3B;AAOgB,QAAA,SAAS,EAAG,QAP5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUK,KAAKjB,KAAL,CAAWkB,OAAX,CAAmBC,MAAnB,KAA8B,CAA9B,GAAkC,oBAAC,iBAAD;AAAmB,QAAA,GAAG,EAAC,GAAvB;AAA2B,QAAA,SAAS,EAAE,OAAtC;AACmB,QAAA,KAAK,EAAE,IAD1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAlC,GAEG,KAAKnB,KAAL,CAAWkB,OAAX,CAAmBE,GAAnB,CACI,UAAAC,CAAC;AAAA,eAAI,oBAAC,iBAAD;AAAmB,UAAA,GAAG,EAAEA,CAAC,CAACC,UAA1B;AAAsC,UAAA,SAAS,EAAED,CAAC,CAACE,SAAnD;AAA8D,UAAA,KAAK,EAAC,OAApE;AACmB,UAAA,KAAK,EAAEF,CAAC,CAACG,KAD5B;AAEmB,UAAA,QAAQ,EAAEH,CAAC,CAACI,QAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAE0CJ,CAAC,CAACC,UAF5C,CAAJ;AAAA,OADL,CAZR,CADJ;AAmBH;;;;EA7CyC1B,KAAK,CAAC8B,S;;SAA/B3B,gB","sourcesContent":["import React from 'react';\nimport {\n    BootstrapTable,\n    TableHeaderColumn\n} from 'react-bootstrap-table';\n\nexport default class MetadataListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handlePageChange = this.handlePageChange.bind(this);\n        this.handleSizePerPageChange = this.handleSizePerPageChange.bind(this);\n    }\n\n    handlePageChange(page, sizePerPage) {\n        this.props.fetchData(page-1, sizePerPage); // rest api pages are 0-indexed while this component is 1-based indexed\n    }\n\n    handleSizePerPageChange(sizePerPage) {\n        // When changing the size per page always navigating to the first page\n        this.props.fetchData(this.props.testId,0, sizePerPage);\n    }\n\n    render() {\n\n        const options = {\n            onSortChange: this.handleSort,\n            onPageChange: this.handlePageChange,\n            onSizePerPageList: this.handleSizePerPageChange,\n            page: this.props.page,\n            hideSizePerPage: true,\n        };\n\n        return (\n            <BootstrapTable data={this.props.data}\n                            remote={true}\n                            fetchInfo={{dataTotalSize: this.props.totalSize}}\n                            pagination={true}\n                            options={options}\n                            hover={true}\n                            bodyStyle={{overflow: 'overlay'}}\n                            scrollTop={ 'Bottom'}\n            >\n\n                {this.props.columns.length === 0 ? <TableHeaderColumn key=\"1\" dataField={\"empty\"}\n                                                                      isKey={true}></TableHeaderColumn> :\n                    this.props.columns.map(\n                        c => <TableHeaderColumn key={c.columnName} dataField={c.fieldName} width='150px'\n                                                isKey={c.isKey}\n                                                dataSort={c.dataSort}>{c.columnName}</TableHeaderColumn>)}\n            </BootstrapTable>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}